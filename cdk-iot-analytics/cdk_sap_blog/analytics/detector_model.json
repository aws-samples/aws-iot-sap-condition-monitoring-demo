{
  "detectorModelDefinition": {
    "states": [
      {
        "stateName": "OverTemp",
        "onInput": {
          "events": [
            
          ],
          "transitionEvents": [
            {
              "eventName": "overTempTooLong",
              "condition": "timeout(\"hiTempDur\")",
              "actions": [
                
              ],
              "nextState": "OverTempAlarm"
            },
            {
              "eventName": "tempBelowMax",
              "condition": "convert(Decimal,$input.CDKSAPBlogEventsInput.temperature_degC_mean) < convert(Decimal,$input.CDKSAPBlogEventsInput.maxTemp_degC)",
              "actions": [
                
              ],
              "nextState": "TempInRange"
            }
          ]
        },
        "onEnter": {
          "events": [
            {
              "eventName": "startTimer",
              "condition": "true",
              "actions": [
                {
                  "setTimer": {
                    "timerName": "hiTempDur",
                    "seconds": 60
                  }
                }
              ]
            }
          ]
        },
        "onExit": {
          "events": [
            {
              "eventName": "deleteTimer",
              "condition": "true",
              "actions": [
                {
                  "clearTimer": {
                    "timerName": "hiTempDur"
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "stateName": "UnderTemp",
        "onInput": {
          "events": [
            
          ],
          "transitionEvents": [
            {
              "eventName": "underTempTooLong",
              "condition": "timeout(\"loTempDur\")",
              "actions": [
                
              ],
              "nextState": "UnderTempAlarm"
            },
            {
              "eventName": "tempAboveMin",
              "condition": "convert(Decimal,$input.CDKSAPBlogEventsInput.temperature_degC_mean) > convert(Decimal,$input.CDKSAPBlogEventsInput.minTemp_degC)",
              "actions": [
                
              ],
              "nextState": "TempInRange"
            }
          ]
        },
        "onEnter": {
          "events": [
            {
              "eventName": "startTimer",
              "condition": "true",
              "actions": [
                {
                  "setTimer": {
                    "timerName": "loTempDur",
                    "seconds": 60
                  }
                }
              ]
            }
          ]
        },
        "onExit": {
          "events": [
            {
              "eventName": "deleteTimer",
              "condition": "true",
              "actions": [
                {
                  "clearTimer": {
                    "timerName": "loTempDur"
                  }
                }
              ]
            }
          ]
        }
      },
      {
        "stateName": "TempInRange",
        "onInput": {
          "events": [
            {
              "eventName": "readTemp",
              "condition": "true",
              "actions": [
                {
                  "setVariable": {
                    "variableName": "temperature_degC",
                    "value": "convert(Decimal, $input.CDKSAPBlogEventsInput.temperature_degC_mean)"
                  }
                }
              ]
            }
          ],
          "transitionEvents": [
            {
              "eventName": "tempAboveMax",
              "condition": "convert(Decimal, $input.CDKSAPBlogEventsInput.temperature_degC_mean) > convert(Decimal, $input.CDKSAPBlogEventsInput.maxTemp_degC)",
              "actions": [
                
              ],
              "nextState": "OverTemp"
            },
            {
              "eventName": "tempBelowMin",
              "condition": "convert(Decimal,$input.CDKSAPBlogEventsInput.temperature_degC_mean) < convert(Decimal,$input.CDKSAPBlogEventsInput.minTemp_degC)",
              "actions": [
                
              ],
              "nextState": "UnderTemp"
            }
          ]
        },
        "onEnter": {
          "events": [
            
          ]
        },
        "onExit": {
          "events": [
            
          ]
        }
      },
      {
        "stateName": "UnderTempAlarm",
        "onInput": {
          "events": [
            
          ],
          "transitionEvents": [
            {
              "eventName": "tempAboveMin",
              "condition": "convert(Decimal,$input.CDKSAPBlogEventsInput.temperature_degC_mean) > convert(Decimal,$input.CDKSAPBlogEventsInput.minTemp_degC)",
              "actions": [
                
              ],
              "nextState": "TempInRange"
            }
          ]
        },
        "onEnter": {
          "events": [
            {
              "eventName": "sendAlert",
              "condition": "true",
              "actions": [
                {
                  "lambda": {
                    "functionArn": "arn:aws:lambda:us-east-1:AWSACCOUNTID:function:CDK-SAP-Blog-OData-Function",
                    "payload": {
                      "contentExpression": "'{\n    \"d\": {\n        \"Equipment\": \"${$input.CDKSAPBlogEventsInput.Equipment}\",\n        \"FunctLoc\": \"${$input.CDKSAPBlogEventsInput.FunctLoc}\",\n        \"ShortText\": \"Alarm temperature below threshold\",\n        \"LongText\": \"Temperature of ${$input.CDKSAPBlogEventsInput.Type} at ${convert(Decimal,$input.CDKSAPBlogEventsInput.temperature_degC_mean)} 째C below threshold of ${convert(Decimal,$input.CDKSAPBlogEventsInput.minTemp_degC)} 째C\"\n    }\n}'",
                      "type": "JSON"
                    }
                  }
                }
              ]
            }
          ]
        },
        "onExit": {
          "events": [
            
          ]
        }
      },
      {
        "stateName": "OverTempAlarm",
        "onInput": {
          "events": [
            
          ],
          "transitionEvents": [
            {
              "eventName": "tempBelowMax",
              "condition": "convert(Decimal,$input.CDKSAPBlogEventsInput.temperature_degC_mean) < convert(Decimal,$input.CDKSAPBlogEventsInput.maxTemp_degC)",
              "actions": [
                
              ],
              "nextState": "TempInRange"
            }
          ]
        },
        "onEnter": {
          "events": [
            {
              "eventName": "sendAlert",
              "condition": "true",
              "actions": [
                {
                  "lambda": {
                    "functionArn": "arn:aws:lambda:us-east-1:AWSACCOUNTID:function:CDK-SAP-Blog-OData-Function",
                    "payload": {
                      "contentExpression": "'{\n    \"d\": {\n        \"Equipment\": \"${$input.CDKSAPBlogEventsInput.Equipment}\",\n        \"FunctLoc\": \"${$input.CDKSAPBlogEventsInput.FunctLoc}\",\n        \"ShortText\": \"Alarm temperature above threshold\",\n        \"LongText\": \"Temperature of ${$input.CDKSAPBlogEventsInput.Type} at ${convert(Decimal,$input.CDKSAPBlogEventsInput.temperature_degC_mean)} 째C above threshold of ${convert(Decimal,$input.CDKSAPBlogEventsInput.maxTemp_degC)} 째C\"\n    }\n}'",
                      "type": "JSON"
                    }
                  }
                }
              ]
            }
          ]
        },
        "onExit": {
          "events": [
            
          ]
        }
      }
    ],
    "initialStateName": "TempInRange"
  },
  "detectorModelDescription": "Detect temperature in a given range.",
  "detectorModelName": "CDKSAPBlogDetectorModel",
  "evaluationMethod": "BATCH",
  "roleArn": "arn:aws:iam::AWSACCOUNTID:role/CDKSAPBlogEventDetectorRole"
}
